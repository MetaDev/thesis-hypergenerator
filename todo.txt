rejection sampling for gmm


todo evaluation and test
--------------------------

named siblings in training

test with only a single child

test evaluation of model

test complete training code

visualise gmm



evaluation and tests
-------------------------------

calculate expressiveness by counting a lot of points in trained and non trained distributions

add method for deciding whether new model is better than previous based on expressiveness and performance
see evaluation file
s

evaluate performance and expressiveness of model

to evaluate the expressivenes of the result, calculate exact (using integrals, with a lot of data)
the occupation of the relevant search space (fitness cutoff)

to compare performance between learned models the actual fitness should be used not the fitness with order that used in training

visualise the distributions of a model and a small representative sample set
make something that visualise some random (or best, worst) samples
and also the corresponding GMMs (in stages of the generation, this visualisation should be placed with the variables)
->in gmm if variable is dim 1 or 2 and visual is true, plot the gmm
->visualise sampling process
add visualisation of GMM to GMM

add gridsearch on parameters to find best parameters

calculate MSE of GMM

more variables, fitness functions and scene models

reachability

learn to fit surface according to surface ratio in a polygon

find out why alignment is so hard to learn in gmm2

plot fitness seperately, fitness func is maybe not correct, try to visualise it

evaluation, the type of metrics and parameters that will be varied
3 models for scenes, constraints and search space

visualisation is part of the model, the mapping
add visualisation to fitness model as well

factory method to visualise fitness functions

make planning of tests and evaluation

writing
------------------
start writing methodology

research:

Neufert constraints

research question:
How to optimise the search space of a procedural content generator, a priori defined by bottom up constraints and a posteriori by its top-down constraints, without negatively impacting its expressiveness?



learning optimisation
-------------------------
add weigthed average as way to combine fitness

instead of multiplying the multiple fitness functions -> dim reduction


only assign sibling conditionallity if the found distribution is above a certain order of quality (in expressiveness)
or if higher order distribution is of lower quality, only train until n children and assign variables

evaluate quality of learned model, MSE form random points with high fitness

increase learning and sampling robustness by using k-fold cross validation.
wich would result in a mixture of GMM's with uniform weights to sample from.
or blend different mixtures together
this would increase the sampling time, but reduce the accidental bias


sampling optimisation
----------------------------

to sample from learned distribution using truncuated normal sampling

in your initial sampling you can always make the trade-off between expressiveness or exploration (search for diverse points)
and fitness or exploitation (search for best points)

conditioning is at the core of the sampling algorithm so that should be optimised

remove deterministic affine transformation chain from the nodesample class,
just sample the nodes and use the original node to calculate the relative values needed for the mapping

convert to more functional structure using rx, see rx_test
->use reactive programming, which makes it an data flow graph,
->make it possible to generate n samples, by creating a tree where each parent has max N_children subscriber nodes
->when sampling (2,5) number of children and 3 is calculated only send data to 3 out of children
->connect every node to an ouput node where all generated samples are captured

sample in batches using buffer of rx and train on each seperate buffer, afterwards evaluate each trained model
on average fitness and expressiveness

check which gmm samples the fastest

sampling would be greatly improved, and thus also the learning
if I would sample more (calculate fitness sample value pairs) on variables defined stochastic
even better would be to do that proportional to it's stochasity, this would be overfitting though

extend search space distribution with sample(n_samples), to generate multiple samples from the search space at once, this is an optimisation

sample in batches, resampling is done from trained model

check if data augmentation helps, extra samples where the fitness function varies a lot between close points
find high uncertainty in search space, especially around the borders, this does influence the search space (unintended complexity)

deterministic/stochastic sampling with stochastic mesh grid tree search

visualisation optimisation
----------------------------------------

calculate the surface difference between search space (rectangle) and a 99% confidence interval ellips

visualise search space of a variable, a rectangle or line for unifrom and ellipses or normal for gmm
add a method to the search space to visualise any variable by name

could add fitness in representative range visualisation (color line in gradient reflecting each value avg fitness)

when visualising the plot should show also completely the ellipses of the distributions, now they are cut off

plot, during training, the fitness histogram (avg, var), and the expressiveness (the ratio of the interval you're still reaching, or the amount of variance)

implement method to cluster (unweighted )samples in X clusters and generate N samples from each cluster
to visualise as a way to show expressive range

generator additional features
-------------------------

implicit child->parent relation given by distance metric

work with fixed shape and variable shape layout nodes
the shape depends on the variables of the parent (don estimate as joint)
the shape is a child of the node
->this is interesting for training rooms, or tables that can vary in size

apply affine transformation on gmm, to make gmm models more reusable see https://en.wikipedia.org/wiki/Multivariate_normal_distribution#Marginal_distributions
->this means that all training of variables can be done within a unit cube, only training on the relative
relation between parent and child. And afterwards the affine transformation of (pos,rot,size) of the parent can be applied on the same gmm without having to recalulate it

make it possible to "freeze' a stochastic variable at a certain position

add method to request all stochastic variables

make it possible to switch back to original prior distribution, after learning, for a named var

allow tree structure for node variables, more generically would be to allow variables of a node be a node again

better print of node sample


code clean up
----------------------

to speed up fitness func Prepared Geometry Operations

remove colors from search space and add type

put some protection on the properties of sample nodes, in terms of querying variable name and sizes
the treedef should be use not the sample nodes

add enum to know if stochastif is discrete or continuous

remove variable classes from search_space module

change name markov tree node

add type checking in python, seriously, where necessary (see package in bookmark thesis)
Types as annotations


examples
-------------------------

different model and constraints: generate chamber in a house, this is a shape->shape relation

see paper open world layour for coffee bar exmaple

test learning with larger hierachy -> 2 level constraints (room->table_chairs)

do the plates on a table example for multiple fitness

do an example of room generation, where the fitness can be the validity of a polygon (non-convex)

evaluation and tests
------------------

use-case scenes, compare the combination of several variables (like rotation and position) into the
joint distribution (rotation and position can be trained independently on different parent properties)
but this would also mean that if you wish to derive position and rotation of the children that you would
have to "tie" these variables in the joint concerning the parent/child fitness

compare single and multi-objective regression

different ways of combining fitness values (between siblings in the joint)
either multiply, average, other more complex functions, (the order of a functions is already a way of changing this function) so different values for the order can be tested as well

because for the fitness function order is not important I should look how the learning best incorporates the fitness
in terms of relativity to the data, should the data be ordered (random or deterministic) mor because it doesn't
matter another approach is to add all possible orderings as data, they are all valid for the fitness function

train with ordering, order by a variable (position, rotation), random order, or no ordering (keep order given by combination) or train on all possible orderings

by training only on parent->child and increasing sibling order the scaling properties in dimensionality can be shown
in terms of necessary data, performance

compare differen configurations of sibling order learning
compare sibling learning between seperate models and full joint with marganilising
seperate models for P(c1|c0,p), P(c2|c1,c0,p),... or one model for P(c0,c1,c2,..|p) and marginilise out

also evaluate the influence of reusing data (learning on combinations of available children)

compare different values of capping the fitness
compare different values of conditions for the fitness in regression

compare weighted samples wrt regression

calculate fitness performance

calculate expressivenes as the weighted average of the distance between samples, where the weight is based on the
fitness of the samples

seperately
evaluate performance of regression using MSE

evaluate weighted sampling using likelihood of a point and it's according weight

try dimensionality reduction to convert multi-objective in single-objective (PCA)
also try weighted and multiplied fitness functions.

evaluate with and without poisson sampling, change the search space size and number of dimensions and
compare expressiveness and mse

model 3 different scenes to do the tests on


expressiveness evaluaion: difference in surface between polygon and surface of gaussians
likelihood of handmade examples in learned distribution


metrics
---------------------
MSE with fitness
fitness mean and variance
weighted data diversity (distance between points) weighted with fitness-> Measures of statistical dispersion


writing
---------------------

argument taxonomy of constraints based on examples found in architectural books

discuss truncuatedsampling vs truncuated learning, performance vs precision (overfitting)


sibling fitness
---------------
1. order siblings based on pair-wise fitness (weight function for samples)


2.
construct seperate models for each number of children if trained on (ordered) sibling data and their fitness that is calculated between siblings (tree structure)

and train a model seperately on the structure of the network, using only (parent_n_siblings, n_siblings)->fitness to generate (conditional) n_siblings, than use training data to estimate optimal distribution for the number of children ()


4. for a large range in the number of children (for example a large area where trees are placed but the area can be both dense or open)-> seperate models unfeasible, fit distribution for a markov chain between ordered siblings (using gmm)





seperate idea, intuitive visualisation of dimensionality of each vector would be really handy
this can be done by setting the dimensionality of the input and other necessary variables




